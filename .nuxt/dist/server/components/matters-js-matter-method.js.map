{"version":3,"file":"components/matters-js-matter-method.js","sources":["webpack:///./components/Matters/js/matterMethod.js"],"sourcesContent":["import * as Matter from 'matter-js'\nimport { UsersStore } from '@/store'\n\nexport default class MatterJS {\n  constructor(props) {\n    // 定数\n    // 床\n    this.floorSize = {\n      width: 800,\n      height: 500,\n      groundHeight: 50,\n      wallWidth: 100,\n      color: '#000000',\n    }\n    this.humanSize = {\n      height: 100,\n    }\n    this.goalSize = {\n      width: 90,\n      height: 100,\n    }\n    this.enviroment = {\n      density: 0.0005,\n      frictionAir: 0.02,\n      restitution: 0.8,\n      friction: 0.1,\n    }\n    this.haveShape = {\n      x: 1100,\n      y: 300,\n    }\n    this.startShape = ''\n    this.goalShape = ''\n    this.Engine = Matter.Engine\n    this.Render = Matter.Render\n    this.World = Matter.World\n    this.Constraint = Matter.Constraint\n    this.Body = Matter.Body\n    this.Bodies = Matter.Bodies\n    this.engine = this.Engine.create()\n    this.render = this.Render.create({\n      element: props.body,\n      engine: this.engine,\n      options: {\n        width: 1400,\n        height: 600,\n        wireframes: false,\n        background: 'rgba(255, 255, 255, 0.5)',\n      },\n    })\n    this.engine.world.gravity.y = 0.98\n\n    this.shapes = []\n    this.props = props\n    Matter.Events.on(this.engine, 'collisionStart', (event) => {\n      this.goalCheck(event)\n    })\n    this.init()\n  }\n\n  // スタート\n  init() {\n    this.ground()\n    this.Engine.run(this.engine)\n    this.Render.run(this.render)\n  }\n\n  //\n\n  // ユーザーが持っている図形 -----------------------------------------------------\n  hasShape(props) {\n    let addShape\n\n    if (props.name === 'circle') {\n      addShape = this.circle({\n        x: this.haveShape.x,\n        y: this.haveShape.y,\n        width: props.width,\n      })\n    } else if (props.name === 'rectangle') {\n      addShape = this.rectangle({\n        x: this.haveShape.x,\n        y: this.haveShape.y,\n        width: props.width,\n        height: props.height,\n      })\n    } else if (props.name === 'trapezoid') {\n      addShape = this.trapezoid({\n        x: this.haveShape.x,\n        y: this.haveShape.y,\n        width: props.width,\n        height: props.height,\n        slope: props.slope,\n      })\n    }\n    const hS = this.Body.create({\n      parts: [addShape],\n      isStatic: true,\n    })\n\n    this.World.add(this.engine.world, hS)\n  }\n  //  -----------------------------------------------------------------------\n\n  // 初期状態 ----------------------------------------------------------------\n  // 床\n  ground() {\n    const cylinder = this.Body.create({\n      parts: [\n        // 下壁\n        this.Bodies.rectangle(\n          this.floorSize.width / 2,\n          this.floorSize.height - this.floorSize.groundHeight / 2,\n          this.floorSize.width - this.floorSize.wallWidth * 2,\n          this.floorSize.groundHeight,\n          {\n            render: {\n              fillStyle: this.floorSize.color,\n            },\n          }\n        ),\n        // 左壁\n        this.Bodies.rectangle(\n          this.floorSize.wallWidth / 2,\n          (this.floorSize.height + this.humanSize.height) / 2,\n          this.floorSize.wallWidth,\n          this.floorSize.height - this.humanSize.height,\n          {\n            render: {\n              fillStyle: this.floorSize.color,\n            },\n          }\n        ),\n        // 右壁\n        this.Bodies.rectangle(\n          this.floorSize.width - this.floorSize.wallWidth / 2,\n          (this.floorSize.height + this.humanSize.height) / 2,\n          this.floorSize.wallWidth,\n          this.floorSize.height - this.humanSize.height,\n          {\n            render: {\n              fillStyle: this.floorSize.color,\n            },\n          }\n        ),\n      ],\n      isStatic: true, // 動かない\n    })\n    this.World.add(this.engine.world, cylinder)\n  }\n\n  // ゴール\n  goal() {\n    const goal = this.Bodies.rectangle(\n      this.floorSize.width - this.floorSize.wallWidth / 2,\n      this.humanSize.height / 2,\n      this.goalSize.width,\n      this.goalSize.height,\n      {\n        render: {\n          sprite: {\n            texture: '/images/20735.jpg',\n          },\n        },\n      }\n    )\n    this.goalShape = goal\n    this.World.add(this.engine.world, [goal])\n  }\n  //  --------------------------------------------------------------------------\n\n  // 図形メソッド ----------------------------------------------------------------\n  circle(props) {\n    // 密度,空気抵抗,反発,摩擦\n    const disk = this.Bodies.circle(\n      props.x,\n      props.y,\n      props.width / 2,\n      this.enviroment\n    )\n\n    this.shapes.push(disk)\n    this.World.add(this.engine.world, [disk])\n    return disk\n  }\n\n  rectangle(props) {\n    const rect = this.Bodies.rectangle(\n      props.x,\n      props.y,\n      props.width,\n      props.height,\n      this.enviroment\n    )\n    this.shapes.push(rect)\n    this.World.add(this.engine.world, [rect])\n    return rect\n  }\n\n  trapezoid(props) {\n    const trape = this.Bodies.trapezoid(\n      props.x,\n      props.y,\n      props.width,\n      props.height,\n      props.slope,\n      this.enviroment\n    )\n    this.shapes.push(trape)\n    this.World.add(this.engine.world, [trape])\n    return trape\n  }\n\n  polygon(props) {\n    const poly = this.Bodies.polygon(\n      props.x,\n      props.y,\n      props.sides,\n      props.width,\n      this.enviroment\n    )\n    this.shapes.push(poly)\n    this.World.add(this.engine.world, [poly])\n    return poly\n  }\n\n  //  --------------------------------------------------------------------------\n\n  //  図形のセット ---------------------------------------------------------------\n  makeShape(props) {\n    const click = { x: 0, y: this.humanSize.height / 2 }\n    // 関係ないところクリックしたら何もさせない\n    if (props.x > this.floorSize.width) {\n      return\n    }\n    if (props.x < this.floorSize.wallWidth + props.width / 2) {\n      click.x = this.floorSize.wallWidth + props.width / 2\n    } else if (\n      props.x >\n      this.floorSize.width - this.floorSize.wallWidth - props.width / 2\n    ) {\n      click.x =\n        this.floorSize.width - this.floorSize.wallWidth - props.width / 2\n    } else {\n      click.x = props.x\n    }\n\n    const mS = props\n    mS.x = click.x\n    mS.y = click.y\n\n    if (props.name === 'trapezoid') this.trapezoid(mS)\n    else if (props.name === 'circle') this.circle(mS)\n    else if (props.name === 'rectangle') this.rectangle(mS)\n  }\n\n  readyShape() {\n    const start = { x: this.floorSize.wallWidth / 2, y: 0, width: 60 }\n    this.startShape = this.circle(start)\n    this.goal()\n  }\n\n  start() {\n    this.Body.applyForce(\n      this.startShape,\n      {\n        x: this.startShape.position.x,\n        y: this.startShape.position.y,\n      },\n      {\n        x: 0.2,\n        y: 0,\n      }\n    )\n  }\n\n  reset() {\n    this.Body.setVelocity(this.startShape, { x: 0, y: 0 })\n    this.Body.setPosition(this.startShape, {\n      x: this.floorSize.wallWidth / 2,\n      y: 0,\n    })\n  }\n  //  --------------------------------------------------------------------------\n\n  //  汎用メソッド  --------------------------------------------------------------\n  goalCheck(e) {\n    const pairs = e.pairs\n    if (pairs.length > 0) {\n      pairs.forEach((p) => {\n        if (p.bodyA === this.startShape && p.bodyB === this.goalShape) {\n          alert('ゴール！！')\n          UsersStore.fetchGoalAt(new Date())\n          UsersStore.incrementGoal()\n          Matter.Events.off(this.engine, 'collisionStart')\n        }\n      })\n    }\n  }\n\n  // 乱数の作成\n  // ユーザーID,日時で計算する\n  // props: {\n  //  id: number\n  // }\n  // ↓\n  // shapeRandom: {\n  //  shape_name: trapezoid | circle | rectangle,\n  //  shape_width: number(50~200),\n  //  shape_height: number(50~200),\n  //  shape_slope: number(0.1~2.0)\n  // }\n\n  makeShapeStateRandom(id) {\n    let randomSum = 0\n    const today = new Date()\n    const ShapeState = {\n      name: '',\n      width: 0,\n      height: 0,\n      slope: 0,\n    }\n\n    // shape name\n    randomSum =\n      id + today.getFullYear() + (today.getMonth() + 1) + today.getDate()\n    randomSum = Math.sin(randomSum)\n    const shapeNameMath = Math.round((randomSum + 1) * 100) % 3\n    if (shapeNameMath === 0) {\n      ShapeState.name = 'circle'\n    } else if (shapeNameMath === 1) {\n      ShapeState.name = 'trapezoid'\n    } else {\n      ShapeState.name = 'rectangle'\n    }\n\n    // shape width\n    randomSum =\n      id +\n      today.getFullYear() +\n      (today.getMonth() + 1) +\n      today.getDate() * today.getDate()\n    randomSum = Math.sin(randomSum)\n    ShapeState.width = Math.round(150 + 100 * randomSum)\n\n    // shape height\n    randomSum =\n      id +\n      today.getFullYear() +\n      (today.getMonth() + 1) * (today.getMonth() + 1) +\n      today.getDate()\n    randomSum = Math.sin(randomSum)\n    ShapeState.height = Math.round(150 + 100 * randomSum)\n\n    // shpae slope\n    randomSum =\n      id +\n      today.getFullYear() * today.getFullYear() +\n      (today.getMonth() + 1) +\n      today.getDate()\n    randomSum = Math.sin(randomSum)\n    ShapeState.slope = 1 + randomSum\n\n    return ShapeState\n  }\n\n  //  --------------------------------------------------------------------------\n}\n"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AAGA;AACA;AACA;AACA;AADA;AACA;AACA;AAEA;AAMA;AACA;AADA;AADA;AAOA;AAMA;AACA;AADA;AADA;AAOA;AAMA;AACA;AADA;AADA;AAOA;AACA;AAxCA;AAyCA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AADA;AADA;AADA;AAQA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAIA;AACA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AA3WA;;;;A","sourceRoot":""}